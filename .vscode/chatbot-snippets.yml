# java-langchain4j section

snippet langchain4j-dep:
  name: "LangChain4j dependency"
  prefix: "java-01"
  scope: "xml"
  body: |
    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-mistral-ai</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

snippet langchain4j-ovhai:
  name: "LangChain4j OVHai dependency"
  prefix: "java-15"
  scope: "xml"
  body: |
    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-ovh-ai</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

snippet simple-ai-services:
  name: "Simple chatbot AI Services"
  prefix: "java-02"
  scope: "java"
  body: |
    interface Assistant {
      @SystemMessage("You are Nestor, a virtual assistant. Answer to the question.")
      String chat(String message);
    }

snippet simple-model:
  name: "Simple chatbot model"
  prefix: "java-03"
  scope: "java"
  body: |
    MistralAiChatModel chatModel = MistralAiChatModel.builder()
        .apiKey(System.getenv("OVH_AI_ENDPOINTS_ACCESS_TOKEN"))
        .modelName("Mistral-7B-Instruct-v0.3")
        .baseUrl(
            "https://mistral-7b-instruct-v0-3.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1")
        .maxTokens(512)
        .temperature(0.0)
        .logRequests(true)
        .logResponses(true)
        .build();

snippet simple-assistant:
  name: "Simple chatbot assistant"
  prefix: "java-04"
  scope: "java"
  body: |
    Assistant assistant = AiServices.builder(Assistant.class)
        .chatLanguageModel(chatModel)
        .build();

snippet simple-call:
  name: "Simple chatbot call"
  prefix: "java-05"
  scope: "java"
  body: |
    _LOG.info("ðŸ’¬: Question: Tell me a joke about Java developers\n");
    _LOG.info("ðŸ¤–: {}", assistant.chat("Tell me a joke about Java developers"));

snippet streaming-ai-services:
  name: "Streaming AI Services"
  prefix: "java-06"
  scope: "java"
  body: |
    interface Assistant {
      @SystemMessage("You are Nestor, a virtual assistant. Answer to the question.")
      TokenStream chat(String message);
    }

snippet streaming-model:
  name: "Streaming model"
  prefix: "java-07"
  scope: "java"
  body: |
    MistralAiStreamingChatModel steamingModel = MistralAiStreamingChatModel.builder()
        .apiKey(System.getenv("OVH_AI_ENDPOINTS_ACCESS_TOKEN"))
        .modelName("Mistral-7B-Instruct-v0.3")
        .baseUrl(
            "https://mistral-7b-instruct-v0-3.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1")
        .maxTokens(512)
        .temperature(0.0)
        .logRequests(false)
        .logResponses(false)
        .build();

snippet streaming-assistant:
  name: "Streaming assistant"
  prefix: "java-08"
  scope: "java"
  body: |
    Assistant assistant = AiServices.builder(Assistant.class)
        .streamingChatLanguageModel(steamingModel)
        .build();

snippet streaming-call:
  name: "Streaming call"
  prefix: "java-09"
  scope: "java"
  body: |
    _LOG.info("ðŸ’¬: Tell me a joke about Java developers\n");
    TokenStream tokenStream = assistant.chat("Tell me a joke about Java developers");
    _LOG.info("ðŸ¤–: ");
    tokenStream
        .onNext(_LOG::info)
        .onError(Throwable::printStackTrace).start();

snippet memory-ai-services:
  name: "Memory call"
  prefix: "java-10"
  scope: "java"
  body: |
    interface Assistant {
      @SystemMessage("You are Nestor, a virtual assistant. Answer to the question.")
      TokenStream chat(String message);
    }

snippet memory-model:
  name: "Memory model"
  prefix: "java-11"
  scope: "java"
  body: |
    MistralAiStreamingChatModel steamingModel = MistralAiStreamingChatModel.builder()
        .apiKey(System.getenv("OVH_AI_ENDPOINTS_ACCESS_TOKEN"))
        .modelName("Mistral-7B-Instruct-v0.3")
        .baseUrl(
            "https://mistral-7b-instruct-v0-3.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1")
        .maxTokens(512)
        .temperature(0.0)
        .logRequests(false)
        .logResponses(false)
        .build();

snippet memory-memory:
  name: "Memory memory storage"
  prefix: "java-12"
  scope: "java"
  body: |
    ChatMemory chatMemory = MessageWindowChatMemory.withMaxMessages(10);

snippet memory-assistant:
  name: "Memory memory assistant"
  prefix: "java-13"
  scope: "jva"
  body: |
    Assistant assistant = AiServices.builder(Assistant.class)
        .streamingChatLanguageModel(steamingModel)
        .chatMemory(chatMemory)
        .build();  

snippet memory-call:
  name: "Memory memory call"
  prefix: "java-14"
  scope: "java"
  body: |
    _LOG.info("ðŸ’¬: My name is StÃ©phane.\n");
        TokenStream tokenStream = assistant.chat("My name is StÃ©phane.");
        _LOG.info("ðŸ¤–: ");
        tokenStream
                .onNext(_LOG::info)
                .onComplete(token -> {
                    _LOG.info("\nðŸ’¬: Do you remember what is my name?\n");
                    _LOG.info("ðŸ¤–: ");
                    assistant.chat("Do you remember what is my name?")
                            .onNext(_LOG::info)
                            .onError(Throwable::printStackTrace).start();
                })
                .onError(Throwable::printStackTrace).start();

snippet rag-ai-services:
  name: "RAG AI Services"
  prefix: "java-16"
  scope: "java"
  body: |
    interface Assistant {
      @SystemMessage("You are Nestor, a virtual assistant. Answer to the question.")
      TokenStream chat(String message);
    }

snippet rag-model:
  name: "RAG model"
  prefix: "java-17"
  scope: "java"
  body: |
    MistralAiStreamingChatModel steamingModel = MistralAiStreamingChatModel.builder()
        .apiKey(System.getenv("OVH_AI_ENDPOINTS_ACCESS_TOKEN"))
        .modelName("Mistral-7B-Instruct-v0.3")
        .baseUrl(
            "https://mistral-7b-instruct-v0-3.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1")
        .maxTokens(512)
        .temperature(0.0)
        .logRequests(false)
        .logResponses(false)
        .build();

snippet rag-memory:
  name: "RAG memory"
  prefix: "java-18"
  scope: "java"
  body: |
    ChatMemory chatMemory = MessageWindowChatMemory.withMaxMessages(10);

snippet rag-chunk:
  name: "RAG chunk"
  prefix: "java-19"
  scope: "java"
  body: |
    DocumentParser documentParser = new TextDocumentParser();
    Document document = loadDocument(
        RAGChatbot.class.getResource("/rag-files/content.txt").getFile(),
        documentParser);
    DocumentSplitter splitter = DocumentSplitters.recursive(400, 0);

    List<TextSegment> segments = splitter.split(document);

snippet rag-embedding:
  name: "RAG embedding"
  prefix: "java-20"
  scope: "java"
  body: |
    EmbeddingModel embeddingModel = OvhAiEmbeddingModel.builder()
                    .apiKey(System.getenv("OVH_AI_ENDPOINTS_ACCESS_TOKEN"))
                    .build();
    List<Embedding> embeddings = embeddingModel.embedAll(segments).content();

snippet rag-embedding-store:
  name: "RAG embedding store"
  prefix: "java-21"
  scope: "java"
  body: |
    EmbeddingStore<TextSegment> embeddingStore = new InMemoryEmbeddingStore<>();
    embeddingStore.addAll(embeddings, segments);
    ContentRetriever contentRetriever = EmbeddingStoreContentRetriever.builder()
        .embeddingStore(embeddingStore)
        .embeddingModel(embeddingModel)
        .maxResults(5)
        .minScore(0.9)
        .build();

snippet rag-assistant:
  name: "RAG assistant"
  prefix: "java-22"
  scope: "java"
  body: |
    Assistant assistant = AiServices.builder(Assistant.class)
        .streamingChatLanguageModel(steamingModel)
        .chatMemory(chatMemory)
        .contentRetriever(contentRetriever)
        .build();

snippet rag-call:
  name: "RAG call"
  prefix: "java-23"
  scope: "java"
  body: |
    _LOG.info("ðŸ’¬: What is AI Endpoints?\n");
    TokenStream tokenStream = assistant.chat("What is AI Endpoints?");
    _LOG.info("ðŸ¤–: ");
    tokenStream
        .onNext(_LOG::info)
        .onError(Throwable::printStackTrace).start();

## java-quarkus section
snippet quarkus-props:
  name: "Quarkus properties"
  prefix: "quarkus-01"
  body: |
    quarkus.langchain4j.mistralai.base-url=\${OVH_AI_ENDPOINTS_MODEL_URL}
    quarkus.langchain4j.mistralai.api-key=\${OVH_AI_ENDPOINTS_ACCESS_TOKEN}
    quarkus.langchain4j.mistralai.chat-model.max-tokens=512
    quarkus.langchain4j.mistralai.chat-model.model-name=\${OVH_AI_ENDPOINTS_MODEL_NAME}
    quarkus.langchain4j.mistralai.log-requests=true
    quarkus.langchain4j.mistralai.log-responses=false
    quarkus.langchain4j.mistralai.chat-model.temperature=0.2

snippet quarkus-svc-simple-class-annot:
  name: "Class annotation simple"
  prefix: "quarkus-02"
  scope: "java"
  body: |
    @RegisterAiService

snippet quarkus-svc-simple-question:
  name: "Entry point to llm simple"
  prefix: "quarkus-03"
  scope: "java"
  body: |
    @SystemMessage("You are a virtual assistant and your name is Nestor.")
    @UserMessage("Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.")
    String askAQuestion(String question);

snippet quarkus-simple-resource-annot:
  name: "Class annotation simple resource"
  prefix: "quarkus-04"
  scope: "java"
  body: |
    @Path("/chatbot")

snippet quarkus-simple-resource-inject:
  name: "Injection simple resource"
  prefix: "quarkus-05"
  scope: "java"
  body: |
    @Inject
    AISimpleService aiEndpointService;

snippet quarkus-simple-resource-ask:
  name: "Simple resource ask method"
  prefix: "quarkus-06"
  scope: "java"
  body: |
    @Path("simple")
    @POST
    public String ask(String question) {
      // Call the askAQuestion method of the AISimpleService service
      return aiEndpointService.askAQuestion(question);
    }
    
snippet quarkus-svc-advanced-class-annot:
  name: "Class annotation advanced" 
  prefix: "quarkus-07"
  scope: "java"
  body: |
    @RegisterAiService

snippet quarkus-svc-advanced-question:
  name: "Entry point to llm advanced"
  prefix: "quarkus-08"
  scope: "java"
  body: |
    @SystemMessage("You are a virtual assistant and your name is Nestor.")
    @UserMessage("Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.")
    Multi<String> askAQuestion(String question);

snippet quarkus-advanced-resource-annot:
  name: "Class annotation advanced resource"
  prefix: "quarkus-09"
  scope: "java"
  body: |
    @Path("/chatbot")

snippet quarkus-advanced-resource-inject:
  name: "Injection advanced resource"
  prefix: "quarkus-10"
  scope: "java"
  body: |
    @Inject
    AIAdvancedService advancedService;

snippet quarkus-advanced-resource-ask:
  name: "Advanced resource ask method"
  prefix: "quarkus-11"
  scope: "java"
  body: |
    @Path("advanced")
    @POST
    public Multi<String> ask(String question) {
      // Call the askAQuestion method of the AISimpleService service and stream the
      // answer, see https://quarkus.io/guides/getting-started-reactive
      return advancedService.askAQuestion(question);
    }

snippet quarkus-svc-memory-class-annot:
  name: "Class annotation memory"
  prefix: "quarkus-12"
  scope: "java"
  body: |
    @ApplicationScoped
    @RegisterAiService

snippet quarkus-svc-memory-question:
  name: "Entry point to llm memory"
  prefix: "quarkus-13"
  scope: "java"
  body: |
    @SystemMessage("You are a virtual assistant and your name is Nestor.")
    @UserMessage("Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.")
    Multi<String> askAQuestion(String question, @MemoryId String memoryId);

snippet quarkus-memory-resource-annot:
  name: "Class annotation memory resource"
  prefix: "quarkus-14"
  scope: "java"
  body: |
    @Path("/chatbot")

snippet quarkus-memory-resource-inject:
  name: "Injection memory resource"
  prefix: "quarkus-15"
  scope: "java"
  body: |
    @Inject
    AIMemoryService aiMemoryService;

snippet quarkus-memory-resource-ask:
  name: "Memory resource ask method"
  prefix: "quarkus-16"
  scope: "java"
  body: |
    @Path("memory")
    @POST
    public Multi<String> ask(String question) {
      // Call the askAQuestion method of the AISimpleService service and stream the
      // answer, see https://quarkus.io/guides/getting-started-reactive
      return aiMemoryService.askAQuestion(question, "user-one");
    }
