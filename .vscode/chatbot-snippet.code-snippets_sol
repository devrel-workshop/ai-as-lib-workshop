{
  "Advanced resource ask method": {
    "body": [
      "@Path(\"advanced\")",
      "@POST",
      "public Multi\u003cString\u003e ask(String question) {",
      "  // Call the askAQuestion method of the AISimpleService service and stream the",
      "  // answer, see https://quarkus.io/guides/getting-started-reactive",
      "  return advancedService.askAQuestion(question);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "quarkus-11",
    "scope": "java"
  },
  "Class annotation advanced": {
    "body": [
      "@RegisterAiService",
      ""
    ],
    "description": "",
    "prefix": "quarkus-07",
    "scope": "java"
  },
  "Class annotation advanced resource": {
    "body": [
      "@Path(\"/chatbot\")",
      ""
    ],
    "description": "",
    "prefix": "quarkus-09",
    "scope": "java"
  },
  "Class annotation memory": {
    "body": [
      "@ApplicationScoped",
      "@RegisterAiService",
      ""
    ],
    "description": "",
    "prefix": "quarkus-12",
    "scope": "java"
  },
  "Class annotation memory resource": {
    "body": [
      "@Path(\"/chatbot\")",
      ""
    ],
    "description": "",
    "prefix": "quarkus-14",
    "scope": "java"
  },
  "Class annotation simple": {
    "body": [
      "@RegisterAiService",
      ""
    ],
    "description": "",
    "prefix": "quarkus-02",
    "scope": "java"
  },
  "Class annotation simple resource": {
    "body": [
      "@Path(\"/chatbot\")",
      ""
    ],
    "description": "",
    "prefix": "quarkus-04",
    "scope": "java"
  },
  "Entry point to llm advanced": {
    "body": [
      "@SystemMessage(\"You are a virtual assistant and your name is Nestor.\")",
      "@UserMessage(\"Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.\")",
      "Multi\u003cString\u003e askAQuestion(String question);",
      ""
    ],
    "description": "",
    "prefix": "quarkus-08",
    "scope": "java"
  },
  "Entry point to llm memory": {
    "body": [
      "@SystemMessage(\"You are a virtual assistant and your name is Nestor.\")",
      "@UserMessage(\"Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.\")",
      "Multi\u003cString\u003e askAQuestion(String question, @MemoryId String memoryId);",
      ""
    ],
    "description": "",
    "prefix": "quarkus-13",
    "scope": "java"
  },
  "Entry point to llm simple": {
    "body": [
      "@SystemMessage(\"You are a virtual assistant and your name is Nestor.\")",
      "@UserMessage(\"Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.\")",
      "String askAQuestion(String question);",
      ""
    ],
    "description": "",
    "prefix": "quarkus-03",
    "scope": "java"
  },
  "Injection advanced resource": {
    "body": [
      "@Inject",
      "AIAdvancedService advancedService;",
      ""
    ],
    "description": "",
    "prefix": "quarkus-10",
    "scope": "java"
  },
  "Injection memory resource": {
    "body": [
      "@Inject",
      "AIMemoryService aiMemoryService;",
      ""
    ],
    "description": "",
    "prefix": "quarkus-15",
    "scope": "java"
  },
  "Injection simple resource": {
    "body": [
      "@Inject",
      "AISimpleService aiEndpointService;",
      ""
    ],
    "description": "",
    "prefix": "quarkus-05",
    "scope": "java"
  },
  "LangChain4j OVHai dependency": {
    "body": [
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e",
      "  \u003cartifactId\u003elangchain4j-ovh-ai\u003c/artifactId\u003e",
      "  \u003cversion\u003e${langchain4j.version}\u003c/version\u003e",
      "\u003c/dependency\u003e",
      ""
    ],
    "description": "",
    "prefix": "java-15",
    "scope": "xml"
  },
  "LangChain4j dependency": {
    "body": [
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e",
      "  \u003cartifactId\u003elangchain4j\u003c/artifactId\u003e",
      "  \u003cversion\u003e${langchain4j.version}\u003c/version\u003e",
      "\u003c/dependency\u003e",
      "",
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e",
      "  \u003cartifactId\u003elangchain4j-mistral-ai\u003c/artifactId\u003e",
      "  \u003cversion\u003e${langchain4j.version}\u003c/version\u003e",
      "\u003c/dependency\u003e",
      ""
    ],
    "description": "",
    "prefix": "java-01",
    "scope": "xml"
  },
  "Memory call": {
    "body": [
      "interface Assistant {",
      "  @SystemMessage(\"You are Nestor, a virtual assistant. Answer to the question.\")",
      "  TokenStream chat(String message);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "java-10",
    "scope": "java"
  },
  "Memory memory assistant": {
    "body": [
      "Assistant assistant = AiServices.builder(Assistant.class)",
      "    .streamingChatLanguageModel(steamingModel)",
      "    .chatMemory(chatMemory)",
      "    .build();  ",
      ""
    ],
    "description": "",
    "prefix": "java-13",
    "scope": "jva"
  },
  "Memory memory call": {
    "body": [
      "_LOG.info(\"ðŸ’¬: My name is StÃ©phane.\\n\");",
      "    TokenStream tokenStream = assistant.chat(\"My name is StÃ©phane.\");",
      "    _LOG.info(\"ðŸ¤–: \");",
      "    tokenStream",
      "            .onNext(_LOG::info)",
      "            .onComplete(token -\u003e {",
      "                _LOG.info(\"\\nðŸ’¬: Do you remember what is my name?\\n\");",
      "                _LOG.info(\"ðŸ¤–: \");",
      "                assistant.chat(\"Do you remember what is my name?\")",
      "                        .onNext(_LOG::info)",
      "                        .onError(Throwable::printStackTrace).start();",
      "            })",
      "            .onError(Throwable::printStackTrace).start();",
      ""
    ],
    "description": "",
    "prefix": "java-14",
    "scope": "java"
  },
  "Memory memory storage": {
    "body": [
      "ChatMemory chatMemory = MessageWindowChatMemory.withMaxMessages(10);",
      ""
    ],
    "description": "",
    "prefix": "java-12",
    "scope": "java"
  },
  "Memory model": {
    "body": [
      "MistralAiStreamingChatModel steamingModel = MistralAiStreamingChatModel.builder()",
      "    .apiKey(System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\"))",
      "    .modelName(\"Mistral-7B-Instruct-v0.2\")",
      "    .baseUrl(",
      "        \"https://mistral-7b-instruct-v02.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1\")",
      "    .maxTokens(512)",
      "    .temperature(0.0)",
      "    .logRequests(false)",
      "    .logResponses(false)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-11",
    "scope": "java"
  },
  "Memory resource ask method": {
    "body": [
      "@Path(\"memory\")",
      "@POST",
      "public Multi\u003cString\u003e ask(String question) {",
      "  // Call the askAQuestion method of the AISimpleService service and stream the",
      "  // answer, see https://quarkus.io/guides/getting-started-reactive",
      "  return aiMemoryService.askAQuestion(question, \"user-one\");",
      "}",
      ""
    ],
    "description": "",
    "prefix": "quarkus-16",
    "scope": "java"
  },
  "Quarkus properties": {
    "body": [
      "quarkus.langchain4j.mistralai.base-url=\\${OVH_AI_ENDPOINTS_MODEL_URL}",
      "quarkus.langchain4j.mistralai.api-key=\\${OVH_AI_ENDPOINTS_ACCESS_TOKEN}",
      "quarkus.langchain4j.mistralai.chat-model.max-tokens=512",
      "quarkus.langchain4j.mistralai.chat-model.model-name=\\${OVH_AI_ENDPOINTS_MODEL_NAME}",
      "quarkus.langchain4j.mistralai.log-requests=true",
      "quarkus.langchain4j.mistralai.log-responses=false",
      "quarkus.langchain4j.mistralai.chat-model.temperature=0.2",
      ""
    ],
    "description": "",
    "prefix": "quarkus-01",
    "scope": ""
  },
  "RAG AI Services": {
    "body": [
      "interface Assistant {",
      "  @SystemMessage(\"You are Nestor, a virtual assistant. Answer to the question.\")",
      "  TokenStream chat(String message);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "java-16",
    "scope": "java"
  },
  "RAG assistant": {
    "body": [
      "Assistant assistant = AiServices.builder(Assistant.class)",
      "    .streamingChatLanguageModel(steamingModel)",
      "    .chatMemory(chatMemory)",
      "    .contentRetriever(contentRetriever)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-22",
    "scope": "java"
  },
  "RAG call": {
    "body": [
      "_LOG.info(\"ðŸ’¬: What is AI Endpoints?\\n\");",
      "TokenStream tokenStream = assistant.chat(\"What is AI Endpoints?\");",
      "_LOG.info(\"ðŸ¤–: \");",
      "tokenStream",
      "    .onNext(_LOG::info)",
      "    .onError(Throwable::printStackTrace).start();",
      ""
    ],
    "description": "",
    "prefix": "java-23",
    "scope": "java"
  },
  "RAG chunk": {
    "body": [
      "DocumentParser documentParser = new TextDocumentParser();",
      "Document document = loadDocument(",
      "    RAGChatbot.class.getResource(\"/rag-files/content.txt\").getFile(),",
      "    documentParser);",
      "DocumentSplitter splitter = DocumentSplitters.recursive(400, 0);",
      "",
      "List\u003cTextSegment\u003e segments = splitter.split(document);",
      ""
    ],
    "description": "",
    "prefix": "java-19",
    "scope": "java"
  },
  "RAG embedding": {
    "body": [
      "EmbeddingModel embeddingModel = OvhAiEmbeddingModel.builder()",
      "                .apiKey(System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\"))",
      "                .build();",
      "List\u003cEmbedding\u003e embeddings = embeddingModel.embedAll(segments).content();",
      ""
    ],
    "description": "",
    "prefix": "java-20",
    "scope": "java"
  },
  "RAG embedding store": {
    "body": [
      "EmbeddingStore\u003cTextSegment\u003e embeddingStore = new InMemoryEmbeddingStore\u003c\u003e();",
      "embeddingStore.addAll(embeddings, segments);",
      "ContentRetriever contentRetriever = EmbeddingStoreContentRetriever.builder()",
      "    .embeddingStore(embeddingStore)",
      "    .embeddingModel(embeddingModel)",
      "    .maxResults(5)",
      "    .minScore(0.9)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-21",
    "scope": "java"
  },
  "RAG memory": {
    "body": [
      "ChatMemory chatMemory = MessageWindowChatMemory.withMaxMessages(10);",
      ""
    ],
    "description": "",
    "prefix": "java-18",
    "scope": "java"
  },
  "RAG model": {
    "body": [
      "MistralAiStreamingChatModel steamingModel = MistralAiStreamingChatModel.builder()",
      "    .apiKey(System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\"))",
      "    .modelName(\"Mistral-7B-Instruct-v0.2\")",
      "    .baseUrl(",
      "        \"https://mistral-7b-instruct-v02.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1\")",
      "    .maxTokens(512)",
      "    .temperature(0.0)",
      "    .logRequests(false)",
      "    .logResponses(false)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-17",
    "scope": "java"
  },
  "Simple chatbot AI Services": {
    "body": [
      "interface Assistant {",
      "  @SystemMessage(\"You are Nestor, a virtual assistant. Answer to the question.\")",
      "  String chat(String message);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "java-02",
    "scope": "java"
  },
  "Simple chatbot assistant": {
    "body": [
      "Assistant assistant = AiServices.builder(Assistant.class)",
      "    .chatLanguageModel(chatModel)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-04",
    "scope": "java"
  },
  "Simple chatbot call": {
    "body": [
      "_LOG.info(\"ðŸ’¬: Question: Tell me a joke about Java developers\\n\");",
      "_LOG.info(\"ðŸ¤–: {}\", assistant.chat(\"Tell me a joke about Java developers\"));",
      ""
    ],
    "description": "",
    "prefix": "java-05",
    "scope": "java"
  },
  "Simple chatbot model": {
    "body": [
      "MistralAiChatModel chatModel = MistralAiChatModel.builder()",
      "    .apiKey(System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\"))",
      "    .modelName(\"Mistral-7B-Instruct-v0.2\")",
      "    .baseUrl(",
      "        \"https://mistral-7b-instruct-v02.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1\")",
      "    .maxTokens(512)",
      "    .temperature(0.0)",
      "    .logRequests(true)",
      "    .logResponses(true)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-03",
    "scope": "java"
  },
  "Simple resource ask method": {
    "body": [
      "@Path(\"simple\")",
      "@POST",
      "public String ask(String question) {",
      "  // Call the askAQuestion method of the AISimpleService service",
      "  return aiEndpointService.askAQuestion(question);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "quarkus-06",
    "scope": "java"
  },
  "Streaming AI Services": {
    "body": [
      "interface Assistant {",
      "  @SystemMessage(\"You are Nestor, a virtual assistant. Answer to the question.\")",
      "  TokenStream chat(String message);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "java-06",
    "scope": "java"
  },
  "Streaming assistant": {
    "body": [
      "Assistant assistant = AiServices.builder(Assistant.class)",
      "    .streamingChatLanguageModel(steamingModel)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-08",
    "scope": "java"
  },
  "Streaming call": {
    "body": [
      "_LOG.info(\"ðŸ’¬: Tell me a joke about Java developers\\n\");",
      "TokenStream tokenStream = assistant.chat(\"Tell me a joke about Java developers\");",
      "_LOG.info(\"ðŸ¤–: \");",
      "tokenStream",
      "    .onNext(_LOG::info)",
      "    .onError(Throwable::printStackTrace).start();",
      ""
    ],
    "description": "",
    "prefix": "java-09",
    "scope": "java"
  },
  "Streaming model": {
    "body": [
      "MistralAiStreamingChatModel steamingModel = MistralAiStreamingChatModel.builder()",
      "    .apiKey(System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\"))",
      "    .modelName(\"Mistral-7B-Instruct-v0.2\")",
      "    .baseUrl(",
      "        \"https://mistral-7b-instruct-v02.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1\")",
      "    .maxTokens(512)",
      "    .temperature(0.0)",
      "    .logRequests(false)",
      "    .logResponses(false)",
      "    .build();",
      ""
    ],
    "description": "",
    "prefix": "java-07",
    "scope": "java"
  }
}