# Audio section

snippet audio-requirements:
  name: "Audio requirements"
  prefix: "py-01"
  #scope: "python"
  body: | 
    # audio section
    # Gradio to create the application, see https://pypi.org/project/gradio/
    gradio==5.5.0
    # NVIDIA client to use AIEndpoints, see https://pypi.org/project/nvidia-riva-client/, https://github.com/nvidia-riva/python-clients
    nvidia-riva-client==2.17.0 
    # Pydub to manipulate audio files, see https://pypi.org/project/pydub/
    pydub==0.25.1
    # Numpy to do sientific computing with Python
    numpy==2.1.3
    # Manage http requests, see https://pypi.org/project/requests/
    requests==2.32.3

# Text to speech GRPC section

snippet tts-grpc-riva-client:
  name: "TTS GRPC riva client"
  prefix: "py-23"
  scope: "python"
  body: | 
    tts_service = riva.client.SpeechSynthesisService(
        riva.client.Auth(
            uri="nvr-tts-en-us.endpoints-grpc.kepler.ai.cloud.ovh.net:443",
            use_ssl=True,
            metadata_args=[["authorization", f"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}"]]
        )
    )

snippet tts-grpc-config:
  name: "TTS GRPC config"
  prefix: "py-24"
  scope: "python"
  body: | 
    tts_config = {
        "voice_name": "English-US.Female-1",
        "language_code": "en-US",  # languages: en-US / es-ES / de-DE / it-IT / zh-CN
        "encoding": riva.client.AudioEncoding.LINEAR_PCM,
        "sample_rate_hz": 44100,  # sample rate: 44.1KHz audio
        "custom_dictionary": {},
        "text": textToTransform,
    }

snippet tts-grpc-response:
  name: "TTS GRPC response"
  prefix: "py-25"
  scope: "python"
  body: | 
    response = tts_service.synthesize(**tts_config)

snippet tts-grpc-return:
  name: "TTS GRPC return"
  prefix: "py-26"
  scope: "python"
  body: | 
    audio_samples = (44100, np.frombuffer(response.audio, dtype=np.int16))

    return audio_samples

snippet tts-grpc-input:
  name: "TTS GRPC input"
  prefix: "py-27"
  scope: "python"
  body: | 
    input_text = gr.Textbox(
        label="üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø",
    )

snippet tts-grpc-output:
  name: "TTS GRPC output"
  prefix: "py-28"
  scope: "python"
  body: | 
    output_audio = gr.Audio(
        label="Audio synthesis (.wav)", type="numpy", show_download_button=False
    )

snippet tts-grpc-demo:
  name: "TTS GRPC demo"
  prefix: "py-29"
  scope: "python"
  body: | 
    demo = gr.Interface(
        fn=text_to_speech, inputs=input_text, outputs=output_audio, allow_flagging="never"
    )

# Speech to text GRPC section

snippet stt-grpc-riva-client:
  name: "STT GRPC riva client"
  prefix: "py-15"
  scope: "python"
  body: | 
    asr_service = riva.client.ASRService(
        riva.client.Auth(
            uri="nvr-asr-fr-fr.endpoints-grpc.kepler.ai.cloud.ovh.net:443",
            use_ssl=True,
            metadata_args=[["authorization", f"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}"]]
        )
    )


snippet stt-grpc-config:
  name: "STT GRPC config"
  prefix: "py-16"
  scope: "python"
  body: | 
    asr_config = riva.client.RecognitionConfig(
        language_code="fr-FR", 
        max_alternatives=1,
        enable_automatic_punctuation=True,
        audio_channel_count = 1,
    ) 


snippet stt-grpc-audio-transform:
  name: "STT GRPC audio tranform"
  prefix: "py-17"
  scope: "python"
  body: | 
    audio_input = AudioSegment.from_file(audio, "wav")
    process_audio_to_wav = audio_input.set_channels(1)
    process_audio_to_wav = process_audio_to_wav.set_frame_rate(16000)
    process_audio_to_wav.export("audio.wav", format="wav")

snippet stt-grpc-audio-as-bytes:
  name: "STT GRPC audio as bytes"
  prefix: "py-18"
  scope: "python"
  body: | 
    with open("audio.wav", 'rb') as fh:
        audio_to_analyse = fh.read()


snippet stt-grpc-response:
  name: "STT GRPC response"
  prefix: "py-19"
  scope: "python"
  body: | 
    response = asr_service.offline_recognize(audio_to_analyse, asr_config)

snippet stt-grpc-return:
  name: "STT GRPC return"
  prefix: "py-20"
  scope: "python"
  body: | 
    output = []
    for res in range(len(response.results)):
        output.append(response.results[res].alternatives[0].transcript)

    return ' '.join(output)

snippet stt-grpc-input:
  name: "STT GRPC input"
  prefix: "py-21"
  scope: "python"
  body: | 
    input_audio = gr.Audio(
        sources=['upload', 'microphone'],
        type='filepath', 
        label="üá´üá∑"
    )

snippet stt-grpc-demo:
  name: "STT GRPC demo"
  prefix: "py-22"
  scope: "python"
  body: | 
    demo = gr.Interface(
        fn=speechToText,
        inputs=input_audio,
        outputs="text",
        allow_flagging="never"
    )

# Text to speech HTTP section

snippet tts-http-model-url:
  name: "TTS model URL"
  prefix: "py-09"
  scope: "python"
  body: | 
    url = "https://nvr-tts-en-us.endpoints.kepler.ai.cloud.ovh.net/api/v1/tts/text_to_audio"

snippet tts-http-bearer:
  name: "TTS bearer"
  prefix: "sol-tts-http-bearer"
  scope: "python"
  body: | 
    headers = {
        "Authorization": f"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}",
    }

snippet tts-http-payload:
  name: "TTS HTTP payload"
  prefix: "py-09"
  scope: "python"
  body: | 
    payload = {
        "encoding": 1,
        "language_code": "en-US",
        "sample_rate_hz": 16000,
        "text": textToTransform,
        "voice_name": "English-US.Female-1",
    }

snippet tts-http-response:
  name: "TTS HTTP response"
  prefix: "py-10"
  scope: "python"
  body: | 
    response = requests.post(url, json=payload, headers=headers)

snippet tts-http-return:
  name: "TTS HTTP return"
  prefix: "py-11"
  scope: "python"
  body: | 
    audio = (16000, np.frombuffer(response.content, dtype=np.int16))

    return audio

snippet tts-http-input:
  name: "TTS HTTP input"
  prefix: "py-12"
  scope: "python"
  body: | 
    input_text = gr.Textbox(
        label="üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø",
    )

snippet tts-http-output:
  name: "TTS HTTP output"
  prefix: "py-13"
  scope: "python"
  body: | 
    output_audio = gr.Audio(
        label="Audio synthesis (.wav)", type="numpy", show_download_button=False
    )

snippet tts-http-demo:
  name: "TTS HTTP demo"
  prefix: "py-14"
  scope: "python"
  body: | 
    demo = gr.Interface(
        fn=text_to_speech, inputs=input_text, outputs=output_audio, allow_flagging="never"
    )

# Speech to text HTTP section

snippet stt-http-model-url:
  name: "STT model URL"
  prefix: "py-02"
  scope: "python"
  body: | 
    url = "https://nvr-asr-fr-fr.endpoints.kepler.ai.cloud.ovh.net/api/v1/asr/recognize"

snippet stt-http-bearer:
  name: "STT bearer"
  prefix: "py-03"
  scope: "python"
  body: | 
    headers = {
        "Authorization": f"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}",
    }

snippet stt-http-audio-transform:
  name: "STT HTTP audio tranform"
  prefix: "py-04"
  scope: "python"
  body: | 
    audio_input = AudioSegment.from_file(audio, "wav")
    process_audio_to_wav = audio_input.set_channels(1)
    process_audio_to_wav = process_audio_to_wav.set_frame_rate(16000)
    process_audio_to_wav.export("audio.wav", format="wav")

snippet stt-http-file-to-send:
  name: "STT HTTP file to send"
  prefix: "py-05"
  scope: "python"
  body: | 
    filetoSend = [('audio', open("audio.wav", 'rb'))]


snippet stt-http-response:
  name: "STT HTTP response"
  prefix: "py-06"
  scope: "python"
  body: | 
    response = requests.post(url, files=filetoSend, headers=headers)
    responseToDisplay=''
    if response.status_code == 200:
        # Handle response
        response_data = response.json()
        for alternative in response_data:
            responseToDisplay+=alternative['alternatives'][0]['transcript']
    else:
        print("Error:", response.status_code)
        responseToDisplay='Unable to do the transcription üò≠'
    
    return responseToDisplay

snippet stt-http-input:
  name: "STT HTTP input"
  prefix: "py-07"
  scope: "python"
  body: | 
    input_audio = gr.Audio(
        sources=['upload', 'microphone'],
        type='filepath',
        label="üá´üá∑"
    )

snippet stt-http-demo:
  name: "STT HTTP demo"
  prefix: "py-08"
  scope: "python"
  body: | 
    demo = gr.Interface(
        fn=speechToText,
        inputs=input_audio,
        outputs="text",
        allow_flagging="never"
    )

# Speech to speech GRPC section

snippet sts-translate-riva-client:
  name: "STS translate riva client"
  prefix: "py-30"
  scope: "python"
  body: | 
    nmt_service = riva.client.NeuralMachineTranslationClient(
        riva.client.Auth(
            uri="nvr-nmt-en-fr.endpoints-grpc.kepler.ai.cloud.ovh.net:443",
            use_ssl=True,
            metadata_args=[
                [
                    "authorization",
                    f"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}",
                ]
            ],
        )
    )

snippet sts-translate-model:
  name: "STS translate model"
  prefix: "py-31"
  scope: "python"
  body: | 
    model_name = "fr_en_24x6"

snippet sts-translate-response:
  name: "STS translate response"
  prefix: "py-32"
  scope: "python"
  body: | 
    response = nmt_service.translate([textToTranslate], model_name, "fr", "en")

    return response.translations[0].text

snippet sts-tts-riva-client:
  name: "STS TTS riva client"
  prefix: "py-33"
  scope: "python"
  body: | 
    tts_service = riva.client.SpeechSynthesisService(
        riva.client.Auth(
            uri="nvr-tts-en-us.endpoints-grpc.kepler.ai.cloud.ovh.net:443",
            use_ssl=True,
            metadata_args=[
                [
                    "authorization",
                    f"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}",
                ]
            ],
        )
    )

snippet sts-tts-config:
  name: "STT TTS config"
  prefix: "py-34"
  scope: "python"
  body: | 
    tts_config = {
        "voice_name": "English-US.Female-1",
        "language_code": "en-US",  # languages: en-US / es-ES / de-DE / it-IT / zh-CN
        "encoding": riva.client.AudioEncoding.LINEAR_PCM,
        "sample_rate_hz": 44100,  # sample rate: 44.1KHz audio
        "custom_dictionary": {},
        "text": textToTransform,
    }

snippet sts-tts-response:
  name: "STT TTS response"
  prefix: "py-35"
  scope: "python"
  body: | 
    response = tts_service.synthesize(**tts_config)


snippet sts-tts-return:
  name: "STT TTS  return"
  prefix: "py-36"
  scope: "python"
  body: | 
    audio_samples = (44100, np.frombuffer(response.audio, dtype=np.int16))

    return audio_samples

snippet sts-riva-client:
  name: "STS riva client"
  prefix: "py-37"
  scope: "python"
  body: | 
    asr_service = riva.client.ASRService(
        riva.client.Auth(
            uri="nvr-asr-fr-fr.endpoints-grpc.kepler.ai.cloud.ovh.net:443",
            use_ssl=True,
            metadata_args=[
                [
                    "authorization",
                    f"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}",
                ]
            ],
        )
    )

snippet sts-config:
  name: "STS config"
  prefix: "py-38"
  scope: "python"
  body: | 
    asr_config = riva.client.RecognitionConfig(
        language_code="fr-FR",
        max_alternatives=1,
        enable_automatic_punctuation=True,
        audio_channel_count=1,
    )

snippet sts-audio-transform:
  name: "STS audio transform"
  prefix: "py-39"
  scope: "python"
  body: | 
    audio_input = AudioSegment.from_file(audio, "wav")
    process_audio_to_wav = audio_input.set_channels(1)
    process_audio_to_wav = process_audio_to_wav.set_frame_rate(16000)
    process_audio_to_wav.export("audio.wav", format="wav")

snippet sts-audio-as-bytes:
  name: "STS audio as bytes"
  prefix: "py-40"
  scope: "python"
  body: | 
    with open("audio.wav", "rb") as fh:
        audio_to_analyse = fh.read()

snippet sts-response:
  name: "STS response"
  prefix: "py-41"
  scope: "python"
  body: | 
    response = asr_service.offline_recognize(audio_to_analyse, asr_config)


snippet sts-return:
  name: "STS return"
  prefix: "py-42"
  scope: "python"
  body: | 
    output = []
    for res in range(len(response.results)):
        output.append(response.results[res].alternatives[0].transcript)

    frenchText = " ".join(output)
    englishText = translate_fr_to_en(frenchText)

    return [frenchText, englishText, text_to_speech(englishText)]

snippet sts-input:
  name: "STS input"
  prefix: "py-44"
  scope: "python"
  body: | 
    input_audio = gr.Audio(label = "French üá´üá∑", sources=["upload", "microphone"], type="filepath")

snippet sts-output:
  name: "STS ouput"
  prefix: "py-43"
  scope: "python"
  body: | 
    output_audio = gr.Audio(
      label="English version üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø", type="numpy", show_download_button=False
    )

snippet sts-demo:
  name: "STS demo"
  prefix: "py-45"
  scope: "python"
  body: | 
    demo = gr.Interface(
        fn=speechToSpeech,
        inputs=input_audio,
        outputs=["text", "text", output_audio],
        allow_flagging="never",
    )
