{
  "Classification URL": {
    "body": [
      "url = \"https://bert-base-ner.endpoints.kepler.ai.cloud.ovh.net/api/text2ner\"",
      ""
    ],
    "description": "",
    "prefix": "py-79",
    "scope": "python"
  },
  "Classification header": {
    "body": [
      "headers = {",
      "\"Content-Type\": \"text/plain\",",
      "\"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-80",
    "scope": "python"
  },
  "Classification model call": {
    "body": [
      "response = requests.post(url, data={\"text\": \"My name is Clara and I live in Berkeley, California.\"}, headers=headers)",
      "if response.status_code == 200:",
      "    response_data = response.json()",
      "    res_data = response.json()",
      "    ",
      "    output = []",
      "    for entity in res_data:",
      "        description = \"\"",
      "        if entity['entity'] == \"B-PER\":",
      "            description = \"is a person\"",
      "        elif entity['entity'] == \"B-LOC\":",
      "            description = \"a location\"",
      "        elif entity['entity'] == \"B-ORG\":",
      "            description = \"an organization\"",
      "        elif entity['entity'] == \"B-MISC\":",
      "            description = \"other\"",
      "        else:",
      "            description = \"undefined\"",
      "        ",
      "        output.append(f\"{entity['word']} {description}\")",
      "    ",
      "    print(\", \".join(output))",
      "else:",
      "    print(\"Error:\", response.status_code)",
      ""
    ],
    "description": "",
    "prefix": "py-81",
    "scope": "python"
  },
  "Emotion URL": {
    "body": [
      "url = \"https://roberta-base-go-emotions.endpoints.kepler.ai.cloud.ovh.net/api/text2emotions\"",
      ""
    ],
    "description": "",
    "prefix": "py-76",
    "scope": "python"
  },
  "Emotion bearer": {
    "body": [
      "headers = {",
      "\"Content-Type\": \"application/json\",",
      "\"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-77",
    "scope": "python"
  },
  "Emotion bearer JS": {
    "body": [
      "const options = {",
      "  headers: {",
      "    'Content-Type': 'application/json',",
      "    'Authorization' : 'Bearer ' + process.env.OVH_AI_ENDPOINTS_ACCESS_TOKEN",
      "  }",
      "};",
      ""
    ],
    "description": "",
    "prefix": "js-02",
    "scope": "javascript"
  },
  "Emotion call": {
    "body": [
      "axios",
      "  .post('https://roberta-base-go-emotions.endpoints.kepler.ai.cloud.ovh.net/api/text2emotions', 'I love JS', options)",
      "  .then(res =\u003e {",
      "    const sortedEmotions = Object.entries(res.data).sort((a, b) =\u003e b[1] - a[1]);",
      "    console.log(sortedEmotions[0][0]);",
      "  })",
      "  .catch(err =\u003e {",
      "    console.error(err)",
      "  })",
      ""
    ],
    "description": "",
    "prefix": "js-03",
    "scope": "javascript"
  },
  "Emotion model call": {
    "body": [
      "response = requests.post(url, data=\"I love Python\", headers=headers)",
      "if response.status_code == 200:",
      "    response_data = response.json()",
      "    max_key = max(response_data, key=response_data.get)",
      "    print(f\"Emotion: {max_key}\")",
      "else:",
      "    print(\"‚ùå Error:\", response.status_code)",
      ""
    ],
    "description": "",
    "prefix": "py-78",
    "scope": "python"
  },
  "Endpoint call": {
    "body": [
      "System.out.println(\"‚è≥ Text analysis...\");",
      "Response response = client.newCall(request).execute();",
      "Map\u003cString, Double\u003e map = new ObjectMapper().readValue(response.body().string(), Map.class);",
      "Map.Entry\u003cString, Double\u003e max = map.entrySet().stream()",
      ".max(Map.Entry.comparingByValue())",
      ".orElseThrow();",
      "",
      "System.out.println(String.format(\"üí¢ Main emotion is: %s\", max.getKey()));",
      ""
    ],
    "description": "",
    "prefix": "java-62",
    "scope": "java"
  },
  "JavaScript dependency": {
    "body": [
      "\"axios\" :\"1.7.7\"",
      ""
    ],
    "description": "",
    "prefix": "js-01",
    "scope": "json"
  },
  "OKHttp initialisation": {
    "body": [
      "OkHttpClient client = new OkHttpClient();",
      ""
    ],
    "description": "",
    "prefix": "java-63",
    "scope": "java"
  },
  "OkHttp initialisation": {
    "body": [
      "OkHttpClient client = new OkHttpClient();",
      ""
    ],
    "description": "",
    "prefix": "java-60",
    "scope": "java"
  },
  "Prepare the request": {
    "body": [
      "RequestBody body = RequestBody.create(\"I love Java\", MediaType.get(\"text/plain; charset=utf-8\"));",
      "Request request = new Request.Builder()",
      "        .url(System.getenv(\"OVH_AI_ENDPOINT_MODEL_EMOTION_URL\"))",
      "        .addHeader(\"Authorization\", String.format(\"Bearer %s\", System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\")))",
      "        .post(body)",
      "        .build();",
      ""
    ],
    "description": "",
    "prefix": "java-61",
    "scope": "java"
  },
  "Product bearer": {
    "body": [
      "const options = {",
      "  headers: {",
      "    'Content-Type': 'application/json',",
      "    'Authorization' : 'Bearer ' + process.env.OVH_AI_ENDPOINTS_ACCESS_TOKEN",
      "  }",
      "};",
      ""
    ],
    "description": "",
    "prefix": "js-06",
    "scope": "javascript"
  },
  "Product call": {
    "body": [
      "axios",
      "  .post(\"https://bert-base-multilingual-uncased-sentiment.endpoints.kepler.ai.cloud.ovh.net/api/text2sentiments\", \"Bon produit, envoy√© dans les temps. Service apr√®s vente perfectible.\", options)",
      "  .then((res) =\u003e {",
      "    const maxRating = Math.max(...Object.values(res.data));",
      "    const maxRatingKey = Object.keys(res.data).find(key =\u003e res.data[key] === maxRating);",
      "    ",
      "    const numStars = parseInt(maxRatingKey.split(' ')[0]);",
      "",
      "    let starString = '';",
      "    for (let i = 0; i \u003c numStars; i++) {",
      "      starString += '‚≠êÔ∏è';",
      "    }",
      "",
      "    console.log(starString);    ",
      "  })",
      "  .catch((err) =\u003e {",
      "    console.error(err);",
      "  });",
      ""
    ],
    "description": "",
    "prefix": "js-07",
    "scope": "javascript"
  },
  "Request preparation": {
    "body": [
      "RequestBody body = RequestBody.create(\"Bon produit, envoy√© dans les temps. Service apr√®s vente perfectible.\", MediaType.get(\"text/plain; charset=utf-8\"));",
      "Request request = new Request.Builder()",
      "        .url(System.getenv(\"OVH_AI_ENDPOINT_MODEL_SENTIMENT_URL\"))",
      "        .addHeader(\"Authorization\", String.format(\"Bearer %s\", System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\")))",
      "        .post(body)",
      "        .build();",
      ""
    ],
    "description": "",
    "prefix": "java-64",
    "scope": "java"
  },
  "Review URL": {
    "body": [
      "url = \"https://bert-base-multilingual-uncased-sentiment.endpoints.kepler.ai.cloud.ovh.net/api/text2sentiments\"",
      ""
    ],
    "description": "",
    "prefix": "py-82",
    "scope": "python"
  },
  "Review header": {
    "body": [
      "headers = {",
      "\"Content-Type\": \"application/json\",",
      "\"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-83",
    "scope": "python"
  },
  "Review model call": {
    "body": [
      "response = requests.post(url, data=\"Good product, delivered on time. Improved after-sales service.\", headers=headers)",
      "if response.status_code == 200:",
      "    response_data = response.json()",
      "    max_key = max(response_data, key=response_data.get)",
      "    num_stars = int(max_key.split()[0])",
      "    star_emoji = '‚≠êÔ∏è' * num_stars",
      "    print(f\"Review : {star_emoji}\")",
      "else:",
      "    print(\"‚ùå Error:\", response.status_code)",
      ""
    ],
    "description": "",
    "prefix": "py-84",
    "scope": "python"
  },
  "Text classification bearer": {
    "body": [
      "const options = {",
      "  headers: {",
      "    'Content-Type': 'application/json',",
      "    'Authorization' : 'Bearer ' + process.env.OVH_AI_ENDPOINTS_ACCESS_TOKEN",
      "  }",
      "};",
      ""
    ],
    "description": "",
    "prefix": "js-04",
    "scope": "javascript"
  },
  "Text classification call": {
    "body": [
      "axios",
      "  .post(\"https://bert-base-ner.endpoints.kepler.ai.cloud.ovh.net/api/text2ner\", \"My name is Clara and I live in Berkeley, California.\", options)",
      "  .then((res) =\u003e {",
      "    console.log(res.data);",
      "    const output = res.data.map((entity) =\u003e {",
      "      let description;",
      "      switch (entity.entity) {",
      "        case \"B-PER\":",
      "          description = \"is a person\";",
      "          break;",
      "        case \"B-LOC\":",
      "          description = \"a location\";",
      "          break;",
      "        case \"B-ORG\":",
      "          description = \"an organization\";",
      "          break;",
      "        case \"B-MISC\":",
      "          description = \"other\";",
      "          break;",
      "",
      "        default:",
      "          description = \"undefined\";",
      "      }",
      "      return `\\${entity.word} is \\${description}`;",
      "    });",
      "",
      "    console.log(output.join(\", \"));",
      "  })",
      "  .catch((err) =\u003e {",
      "    console.error(err);",
      "  });",
      ""
    ],
    "description": "",
    "prefix": "js-05",
    "scope": "javascript"
  }
}