{
  "Audio requirements": {
    "body": [
      "# audio section",
      "# Gradio to create the application, see https://pypi.org/project/gradio/",
      "gradio==5.5.0",
      "# Pydub to manipulate audio files, see https://pypi.org/project/pydub/",
      "pydub==0.25.1",
      "# Numpy to do sientific computing with Python",
      "numpy==2.1.3",
      "# Manage http requests, see https://pypi.org/project/requests/",
      "requests==2.32.3",
      ""
    ],
    "description": "",
    "prefix": "py-01",
    "scope": ""
  },
  "STS TTS riva client": {
    "body": [
      "tts_service = riva.client.SpeechSynthesisService(",
      "    riva.client.Auth(",
      "        uri=\"nvr-tts-en-us.endpoints-grpc.kepler.ai.cloud.ovh.net:443\",",
      "        use_ssl=True,",
      "        metadata_args=[",
      "            [",
      "                \"authorization\",",
      "                f\"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "            ]",
      "        ],",
      "    )",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-33",
    "scope": "python"
  },
  "STS audio as bytes": {
    "body": [
      "with open(\"audio.wav\", \"rb\") as fh:",
      "    audio_to_analyse = fh.read()",
      ""
    ],
    "description": "",
    "prefix": "py-40",
    "scope": "python"
  },
  "STS audio transform": {
    "body": [
      "audio_input = AudioSegment.from_file(audio, \"wav\")",
      "process_audio_to_wav = audio_input.set_channels(1)",
      "process_audio_to_wav = process_audio_to_wav.set_frame_rate(16000)",
      "process_audio_to_wav.export(\"audio.wav\", format=\"wav\")",
      ""
    ],
    "description": "",
    "prefix": "py-39",
    "scope": "python"
  },
  "STS config": {
    "body": [
      "asr_config = riva.client.RecognitionConfig(",
      "    language_code=\"fr-FR\",",
      "    max_alternatives=1,",
      "    enable_automatic_punctuation=True,",
      "    audio_channel_count=1,",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-38",
    "scope": "python"
  },
  "STS demo": {
    "body": [
      "demo = gr.Interface(",
      "    fn=speechToSpeech,",
      "    inputs=input_audio,",
      "    outputs=[\"text\", \"text\", output_audio],",
      "    allow_flagging=\"never\",",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-45",
    "scope": "python"
  },
  "STS input": {
    "body": [
      "input_audio = gr.Audio(label = \"French üá´üá∑\", sources=[\"upload\", \"microphone\"], type=\"filepath\")",
      ""
    ],
    "description": "",
    "prefix": "py-44",
    "scope": "python"
  },
  "STS ouput": {
    "body": [
      "output_audio = gr.Audio(",
      "  label=\"English version üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø\", type=\"numpy\", show_download_button=False",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-43",
    "scope": "python"
  },
  "STS response": {
    "body": [
      "response = asr_service.offline_recognize(audio_to_analyse, asr_config)",
      ""
    ],
    "description": "",
    "prefix": "py-41",
    "scope": "python"
  },
  "STS return": {
    "body": [
      "output = []",
      "for res in range(len(response.results)):",
      "    output.append(response.results[res].alternatives[0].transcript)",
      "",
      "frenchText = \" \".join(output)",
      "englishText = translate_fr_to_en(frenchText)",
      "",
      "return [frenchText, englishText, text_to_speech(englishText)]",
      ""
    ],
    "description": "",
    "prefix": "py-42",
    "scope": "python"
  },
  "STS riva client": {
    "body": [
      "asr_service = riva.client.ASRService(",
      "    riva.client.Auth(",
      "        uri=\"nvr-asr-fr-fr.endpoints-grpc.kepler.ai.cloud.ovh.net:443\",",
      "        use_ssl=True,",
      "        metadata_args=[",
      "            [",
      "                \"authorization\",",
      "                f\"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "            ]",
      "        ],",
      "    )",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-37",
    "scope": "python"
  },
  "STS translate model": {
    "body": [
      "model_name = \"fr_en_24x6\"",
      ""
    ],
    "description": "",
    "prefix": "py-31",
    "scope": "python"
  },
  "STS translate response": {
    "body": [
      "response = nmt_service.translate([textToTranslate], model_name, \"fr\", \"en\")",
      "",
      "return response.translations[0].text",
      ""
    ],
    "description": "",
    "prefix": "py-32",
    "scope": "python"
  },
  "STS translate riva client": {
    "body": [
      "nmt_service = riva.client.NeuralMachineTranslationClient(",
      "    riva.client.Auth(",
      "        uri=\"nvr-nmt-en-fr.endpoints-grpc.kepler.ai.cloud.ovh.net:443\",",
      "        use_ssl=True,",
      "        metadata_args=[",
      "            [",
      "                \"authorization\",",
      "                f\"bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "            ]",
      "        ],",
      "    )",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-30",
    "scope": "python"
  },
  "STT HTTP audio tranform": {
    "body": [
      "audio_input = AudioSegment.from_file(audio, \"wav\")",
      "process_audio_to_wav = audio_input.set_channels(1)",
      "process_audio_to_wav = process_audio_to_wav.set_frame_rate(16000)",
      "process_audio_to_wav.export(\"audio.wav\", format=\"wav\")",
      ""
    ],
    "description": "",
    "prefix": "py-04",
    "scope": "python"
  },
  "STT HTTP demo": {
    "body": [
      "demo = gr.Interface(",
      "    fn=speechToText,",
      "    inputs=input_audio,",
      "    outputs=\"text\",",
      "    allow_flagging=\"never\"",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-08",
    "scope": "python"
  },
  "STT HTTP file to send": {
    "body": [
      "filetoSend = [('audio', open(\"audio.wav\", 'rb'))]",
      ""
    ],
    "description": "",
    "prefix": "py-05",
    "scope": "python"
  },
  "STT HTTP input": {
    "body": [
      "input_audio = gr.Audio(",
      "    sources=['upload', 'microphone'],",
      "    type='filepath',",
      "    label=\"üá´üá∑\"",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-07",
    "scope": "python"
  },
  "STT HTTP response": {
    "body": [
      "response = requests.post(url, files=filetoSend, headers=headers)",
      "responseToDisplay=''",
      "if response.status_code == 200:",
      "    # Handle response",
      "    response_data = response.json()",
      "    for alternative in response_data:",
      "        responseToDisplay+=alternative['alternatives'][0]['transcript']",
      "else:",
      "    print(\"Error:\", response.status_code)",
      "    responseToDisplay='Unable to do the transcription üò≠'",
      "",
      "return responseToDisplay",
      ""
    ],
    "description": "",
    "prefix": "py-06",
    "scope": "python"
  },
  "STT TTS  return": {
    "body": [
      "audio_samples = (44100, np.frombuffer(response.audio, dtype=np.int16))",
      "",
      "return audio_samples",
      ""
    ],
    "description": "",
    "prefix": "py-36",
    "scope": "python"
  },
  "STT TTS config": {
    "body": [
      "tts_config = {",
      "    \"voice_name\": \"English-US.Female-1\",",
      "    \"language_code\": \"en-US\",  # languages: en-US / es-ES / de-DE / it-IT / zh-CN",
      "    \"encoding\": riva.client.AudioEncoding.LINEAR_PCM,",
      "    \"sample_rate_hz\": 44100,  # sample rate: 44.1KHz audio",
      "    \"custom_dictionary\": {},",
      "    \"text\": textToTransform,",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-34",
    "scope": "python"
  },
  "STT TTS response": {
    "body": [
      "response = tts_service.synthesize(**tts_config)",
      ""
    ],
    "description": "",
    "prefix": "py-35",
    "scope": "python"
  },
  "STT bearer": {
    "body": [
      "headers = {",
      "    \"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-03",
    "scope": "python"
  },
  "STT model URL": {
    "body": [
      "url = \"https://nvr-asr-en-gb.endpoints.kepler.ai.cloud.ovh.net/api/v1/asr/recognize\"",
      ""
    ],
    "description": "",
    "prefix": "py-02",
    "scope": "python"
  },
  "TTS HTTP demo": {
    "body": [
      "demo = gr.Interface(",
      "    fn=text_to_speech, inputs=input_text, outputs=output_audio, allow_flagging=\"never\"",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-14",
    "scope": "python"
  },
  "TTS HTTP input": {
    "body": [
      "input_text = gr.Textbox(",
      "    label=\"üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø\",",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-12",
    "scope": "python"
  },
  "TTS HTTP output": {
    "body": [
      "output_audio = gr.Audio(",
      "    label=\"Audio synthesis (.wav)\", type=\"numpy\", show_download_button=False",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-13",
    "scope": "python"
  },
  "TTS HTTP payload": {
    "body": [
      "payload = {",
      "    \"encoding\": 1,",
      "    \"language_code\": \"en-US\",",
      "    \"sample_rate_hz\": 16000,",
      "    \"text\": textToTransform,",
      "    \"voice_name\": \"English-US.Female-1\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-09",
    "scope": "python"
  },
  "TTS HTTP response": {
    "body": [
      "response = requests.post(url, json=payload, headers=headers)",
      ""
    ],
    "description": "",
    "prefix": "py-10",
    "scope": "python"
  },
  "TTS HTTP return": {
    "body": [
      "audio = (16000, np.frombuffer(response.content, dtype=np.int16))",
      "",
      "return audio",
      ""
    ],
    "description": "",
    "prefix": "py-11",
    "scope": "python"
  },
  "TTS bearer": {
    "body": [
      "headers = {",
      "    \"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "sol-tts-http-bearer",
    "scope": "python"
  },
  "TTS model URL": {
    "body": [
      "url = \"https://nvr-tts-en-us.endpoints.kepler.ai.cloud.ovh.net/api/v1/tts/text_to_audio\"",
      ""
    ],
    "description": "",
    "prefix": "py-09",
    "scope": "python"
  }
}