{
  "Audio requirements": {
    "body": [
      "# audio section",
      "# Gradio to create the application, see https://pypi.org/project/gradio/",
      "gradio==5.5.0",
      "# Pydub to manipulate audio files, see https://pypi.org/project/pydub/",
      "pydub==0.25.1",
      "# Numpy to do sientific computing with Python",
      "numpy==2.1.3",
      "# Manage http requests, see https://pypi.org/project/requests/",
      "requests==2.32.3",
      ""
    ],
    "description": "",
    "prefix": "py-01",
    "scope": ""
  },
  "STS asr EN URL": {
    "body": [
      "url = \"https://nvr-asr-en-gb.endpoints.kepler.ai.cloud.ovh.net/api/v1/asr/recognize\"",
      ""
    ],
    "description": "",
    "prefix": "py-30",
    "scope": "python"
  },
  "STS asr EN bearer": {
    "body": [
      "headers = {",
      "    \"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-31",
    "scope": "python"
  },
  "STS asr EN call": {
    "body": [
      "# Prepare the file to send to the endpoint",
      "filetoSend = [(\"audio\", open(\"audio.wav\", \"rb\"))]",
      "",
      "# Do the POST request and display the transcription",
      "response = requests.post(url, files=filetoSend, headers=headers)",
      "responseToDisplay = \"\"",
      "if response.status_code == 200:",
      "    # Handle response",
      "    response_data = response.json()",
      "    for alternative in response_data:",
      "        responseToDisplay += alternative[\"alternatives\"][0][\"transcript\"]",
      "else:",
      "    print(\"Error:\", response.status_code)",
      "    responseToDisplay = \"Unable to do the transcription üò≠\"",
      "",
      "return responseToDisplay",
      ""
    ],
    "description": "",
    "prefix": "py-33",
    "scope": "python"
  },
  "STS asr EN configure": {
    "body": [
      "audio_input = AudioSegment.from_file(audio, \"wav\")",
      "process_audio_to_wav = audio_input.set_channels(1)",
      "process_audio_to_wav = process_audio_to_wav.set_frame_rate(16000)",
      "process_audio_to_wav.export(\"audio.wav\", format=\"wav\")",
      ""
    ],
    "description": "",
    "prefix": "py-32",
    "scope": "python"
  },
  "STS demo": {
    "body": [
      "demo = gr.Interface(",
      "fn=speechToSpeech,",
      "inputs=input_audio,",
      "outputs=[gr.Textbox(label=\"üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø\"), gr.Textbox(label=\"üá™üá∏\"), output_audio],",
      "allow_flagging=\"never\",",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-46",
    "scope": "python"
  },
  "STS final asr en call": {
    "body": [
      "englishText = speechToText(audio)",
      ""
    ],
    "description": "",
    "prefix": "py-41",
    "scope": "python"
  },
  "STS final return": {
    "body": [
      "return [englishText, spanishText, text_to_speech(spanishText)]",
      ""
    ],
    "description": "",
    "prefix": "py-43",
    "scope": "python"
  },
  "STS final translate call": {
    "body": [
      "spanishText = translate_en_to_spanish(englishText)",
      ""
    ],
    "description": "",
    "prefix": "py-42",
    "scope": "python"
  },
  "STS input audio en": {
    "body": [
      "input_audio = gr.Audio(label = \"English üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø\", sources=[\"upload\", \"microphone\"], type=\"filepath\")",
      ""
    ],
    "description": "",
    "prefix": "py-44",
    "scope": "python"
  },
  "STS ouput": {
    "body": [
      "output_audio = gr.Audio(",
      "  label=\"Spanish version üá™üá∏\", type=\"numpy\", show_download_button=False",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-45",
    "scope": "python"
  },
  "STS translate URL": {
    "body": [
      "url = \"https://llama-3-3-70b-instruct.endpoints.kepler.ai.cloud.ovh.net/api/openai_compat/v1/chat/completions\"",
      "payload = {",
      "    \"max_tokens\": 512,",
      "    \"messages\": [",
      "        {",
      "            \"content\": \"Do not add any other words or explicative than the translation requested.\",",
      "            \"name\": \"System\",",
      "            \"role\": \"system\"",
      "        },",
      "        {",
      "            \"content\": \"translate the phrase following sentence in Espagnol: \" + english_text,",
      "            \"name\": \"User\",",
      "            \"role\": \"user\"",
      "        }",
      "    ],",
      "    \"model\": \"Meta-Llama-3_3-70B-Instruct\",",
      "    \"temperature\": 0,",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-34",
    "scope": "python"
  },
  "STS tts ES URL": {
    "body": [
      "url = \"https://nvr-tts-en-us.endpoints.kepler.ai.cloud.ovh.net/api/v1/tts/text_to_audio\"",
      ""
    ],
    "description": "",
    "prefix": "py-37",
    "scope": "python"
  },
  "STS tts ES bearer": {
    "body": [
      "headers = {",
      "    \"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-38",
    "scope": "python"
  },
  "STS tts ES call": {
    "body": [
      "response = requests.post(url, json=payload, headers=headers)",
      "",
      "# Return the audio",
      "# see https://numpy.org/doc/stable/reference/generated/numpy.frombuffer.html",
      "audio = (16000, np.frombuffer(response.content, dtype=np.int16))",
      "",
      "return audio",
      ""
    ],
    "description": "",
    "prefix": "py-40",
    "scope": "python"
  },
  "STS tts ES payload": {
    "body": [
      "payload = {",
      "    \"encoding\": 1,",
      "    \"language_code\": \"es-ES\",",
      "    \"sample_rate_hz\": 16000,",
      "    \"text\": textToTransform,",
      "    \"voice_name\": \"Spanish-ES-Female-1\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-39",
    "scope": "python"
  },
  "STT HTTP audio tranform": {
    "body": [
      "audio_input = AudioSegment.from_file(audio, \"wav\")",
      "process_audio_to_wav = audio_input.set_channels(1)",
      "process_audio_to_wav = process_audio_to_wav.set_frame_rate(16000)",
      "process_audio_to_wav.export(\"audio.wav\", format=\"wav\")",
      ""
    ],
    "description": "",
    "prefix": "py-04",
    "scope": "python"
  },
  "STT HTTP demo": {
    "body": [
      "demo = gr.Interface(",
      "    fn=speechToText,",
      "    inputs=input_audio,",
      "    outputs=\"text\",",
      "    allow_flagging=\"never\"",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-08",
    "scope": "python"
  },
  "STT HTTP file to send": {
    "body": [
      "filetoSend = [('audio', open(\"audio.wav\", 'rb'))]",
      ""
    ],
    "description": "",
    "prefix": "py-05",
    "scope": "python"
  },
  "STT HTTP input": {
    "body": [
      "input_audio = gr.Audio(",
      "    sources=['upload', 'microphone'],",
      "    type='filepath',",
      "    label=\"üá´üá∑\"",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-07",
    "scope": "python"
  },
  "STT HTTP response": {
    "body": [
      "response = requests.post(url, files=filetoSend, headers=headers)",
      "responseToDisplay=''",
      "if response.status_code == 200:",
      "    # Handle response",
      "    response_data = response.json()",
      "    for alternative in response_data:",
      "        responseToDisplay+=alternative['alternatives'][0]['transcript']",
      "else:",
      "    print(\"Error:\", response.status_code)",
      "    responseToDisplay='Unable to do the transcription üò≠'",
      "",
      "return responseToDisplay",
      ""
    ],
    "description": "",
    "prefix": "py-06",
    "scope": "python"
  },
  "STT bearer": {
    "body": [
      "headers = {",
      "    \"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-03",
    "scope": "python"
  },
  "STT model URL": {
    "body": [
      "url = \"https://nvr-asr-en-gb.endpoints.kepler.ai.cloud.ovh.net/api/v1/asr/recognize\"",
      ""
    ],
    "description": "",
    "prefix": "py-02",
    "scope": "python"
  },
  "STT translate bearer": {
    "body": [
      "headers = {",
      "    \"Content-Type\": \"application/json\",",
      "    \"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-35",
    "scope": "python"
  },
  "STT translate call": {
    "body": [
      "# Send the request to endpoint with text to transform",
      "response = requests.post(url, json=payload, headers=headers)",
      "",
      "# Return the translation",
      "text = \"‚ùå Noting to translate ‚ùå\"",
      "if response.status_code == 200:",
      "    # Handle response",
      "    response_data = response.json()",
      "    # Parse JSON response",
      "    choices = response_data[\"choices\"]",
      "    for choice in choices:",
      "        text = choice[\"message\"][\"content\"]",
      "        # Process text and finish_reason",
      "        print(text)",
      "else:",
      "    print(\"Error:\", response.status_code)",
      "",
      "return text",
      ""
    ],
    "description": "",
    "prefix": "py-36",
    "scope": "python"
  },
  "TTS HTTP demo": {
    "body": [
      "demo = gr.Interface(",
      "    fn=text_to_speech, inputs=input_text, outputs=output_audio, allow_flagging=\"never\"",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-14",
    "scope": "python"
  },
  "TTS HTTP input": {
    "body": [
      "input_text = gr.Textbox(",
      "    label=\"üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø\",",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-12",
    "scope": "python"
  },
  "TTS HTTP output": {
    "body": [
      "output_audio = gr.Audio(",
      "    label=\"Audio synthesis (.wav)\", type=\"numpy\", show_download_button=False",
      ")",
      ""
    ],
    "description": "",
    "prefix": "py-13",
    "scope": "python"
  },
  "TTS HTTP payload": {
    "body": [
      "payload = {",
      "    \"encoding\": 1,",
      "    \"language_code\": \"en-US\",",
      "    \"sample_rate_hz\": 16000,",
      "    \"text\": textToTransform,",
      "    \"voice_name\": \"English-US.Female-1\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "py-09",
    "scope": "python"
  },
  "TTS HTTP response": {
    "body": [
      "response = requests.post(url, json=payload, headers=headers)",
      ""
    ],
    "description": "",
    "prefix": "py-10",
    "scope": "python"
  },
  "TTS HTTP return": {
    "body": [
      "audio = (16000, np.frombuffer(response.content, dtype=np.int16))",
      "",
      "return audio",
      ""
    ],
    "description": "",
    "prefix": "py-11",
    "scope": "python"
  },
  "TTS bearer": {
    "body": [
      "headers = {",
      "    \"Authorization\": f\"Bearer {os.getenv('OVH_AI_ENDPOINTS_ACCESS_TOKEN')}\",",
      "}",
      ""
    ],
    "description": "",
    "prefix": "sol-tts-http-bearer",
    "scope": "python"
  },
  "TTS model URL": {
    "body": [
      "url = \"https://nvr-tts-en-us.endpoints.kepler.ai.cloud.ovh.net/api/v1/tts/text_to_audio\"",
      ""
    ],
    "description": "",
    "prefix": "py-09",
    "scope": "python"
  }
}